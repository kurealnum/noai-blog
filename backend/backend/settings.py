"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from django.core.management.commands.runserver import Command as runserver
from dotenv import load_dotenv
from os.path import join, dirname
from os import environ
import json

# Loading environment variables
dotenv_path = join(dirname(__file__), "settings.env")
load_dotenv(dotenv_path)

# Changing the default port of the runserver command
runserver.default_port = "6900"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.get("DEBUG", "False") == "True"

ALLOWED_HOSTS = json.loads(environ.get("ALLOWED_HOSTS", "[]"))  # type: ignore

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "filters": ["require_debug_false"],
            "maxBytes": 1024 * 1024 * 15,
            "backupCount": 10,
            "filename": "main.log",
            "class": "logging.handlers.RotatingFileHandler",
        },
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {"handlers": ["file", "console"], "level": "INFO", "propagate": True}
    },
}


# Application definition
AUTH_USER_MODEL = "accounts.CustomUser"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "django.contrib.postgres",
    "rest_framework",
    "corsheaders",
    "accounts",
    "blogs",
    "search",
    "storages",
    "followers",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": environ.get("DATABASE_NAME"),
        "USER": environ.get("DATABASE_USER"),
        "PASSWORD": environ.get("DATABASE_PASSWORD"),
        "HOST": environ.get("DATABASE_HOST"),
        "PORT": environ.get("DATABASE_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static & media files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# this refers to the use of django-storages
USE_STORAGES = environ.get("USE_STORAGES")
STATIC_URL = environ.get("STATIC_URL")
MEDIA_URL = "/media/"

if USE_STORAGES == "True":
    AWS_ACCESS_KEY_ID = environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_ENDPOINT_URL = environ.get("AWS_S3_ENDPOINT_URL")
    AWS_LOCATION = environ.get("AWS_LOCATION")
    AWS_DEFAULT_ACL = environ.get("AWS_DEFAULT_ACL")
    AWS_QUERYSTRING_AUTH = environ.get("AWS_QUERYSTRING_AUTH")

    # static settings
    STATICFILES_STORAGE = environ.get("STATICFILES_STORAGE")
    STATIC_URL = "{}/{}/".format(AWS_S3_ENDPOINT_URL, "static")

    DEFAULT_FILE_STORAGE = "backend.storage_backends.PublicMediaStorage"
    MEDIA_URL = "{}/{}/".format(AWS_S3_ENDPOINT_URL, "media")

    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }

else:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

    STATIC_ROOT = environ.get("STATIC_ROOT")
    STATIC_URL = environ.get("STATIC_URL")
    MEDIA_ROOT = "/var/www/noaiblog/media/"
    MEDIA_URL = environ.get("MEDIA_URL")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


CORS_ALLOWED_ORIGINS = json.loads(environ.get("CORS_ALLOWED_ORIGINS"))  # type: ignore
CSRF_TRUSTED_ORIGINS = json.loads(environ.get("CORS_ALLOWED_ORIGINS"))  # type: ignore
CSRF_COOKIE_SAMESITE = environ.get("CSRF_COOKIE_SAMESITE")
SESSION_COOKIE_SAMESITE = environ.get("SESSION_COOKIE_SAMESITE")
CSRF_COOKIE_HTTPONLY = environ.get("CSRF_COOKIE_HTTPONLY", "False") == "True"
SESSION_COOKIE_HTTPONLY = environ.get("SESSION_COOKIE_HTTPONLY", "False") == "True"

CSRF_COOKIE_SECURE = environ.get("SESSION_COOKIE_HTTPONLY", "False") == "True"
SESSION_COOKIE_SECURE = environ.get("SESSION_COOKIE_HTTPONLY", "False") == "True"

CORS_EXPOSE_HEADERS = environ.get("CORS_EXPOSE_HEADERS")
CORS_ALLOW_CREDENTIALS = environ.get("SESSION_COOKIE_HTTPONLY", "False") == "True"

LOGIN_URL = "/login"

# for drf files
UPLOADED_FILES_USE_URL = True

# for emails (not in use as of sep 11, 2024)
EMAIL_HOST = environ.get("EMAIL_HOST")
EMAIL_PORT = environ.get("EMAIL_PORT")
EMAIL_HOST_PASSWORD = environ.get("EMAIL_HOST_PASSWORD")
EMAIL_HOST_USER = environ.get("EMAIL_HOST_USER")
EMAIL_USE_TLS = environ.get("EMAIL_USE_TLS")
